version: "3.5"
services:

  mysqls_ledger:
    image: mysql:8
    container_name: "mysql_container_for_ledger"
    volumes:
      - mysql-data-Ledger:/var/lib/mysql
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=ledger@Kanzen2024
    networks:
      - scalar-network
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=ledger@Kanzen2024 --execute \"SHOW DATABASES;\""
      interval: 10s
      timeout: 60s
      retries: 15

  mysqls_auditor:
    image: mysql:8
    container_name: "mysql_container_for_auditor"
    volumes:
      - mysql-data-Auditor:/var/lib/mysql
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=auditor@Kanzen2024
    networks:
      - scalar-network
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=auditor@Kanzen2024 --execute \"SHOW DATABASES;\""
      interval: 10s
      timeout: 60s
      retries: 15


  mysqls_scalardb:
    image: mysql:8
    container_name: "mysql_container_for_scalardb"
    volumes:
      - mysql-data-ScalarDB:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3310:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=scalardb@Kanzen2024
      - MYSQL_DATABASE=fault_tool
    networks:
      - scalar-network
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=scalardb@Kanzen2024 --execute \"SHOW DATABASES;\""
      interval: 10s
      timeout: 60s
      retries: 15

  # -----------------------

  scalardl-ledger-schema-loader-mysql-ledger:
    image: ghcr.io/scalar-labs/scalardl-schema-loader:3.10.0
    volumes:
      - ./scalardb-ledger.properties:/scalardb-ledger.properties
    depends_on:
      mysqls_ledger:
        condition: service_healthy
    command:
      - "-c"
      - "/scalardb-ledger.properties"
      - "--coordinator"
    networks:
      - scalar-network
    restart: on-failure

  scalar-ledger:
    image: ghcr.io/scalar-labs/scalardl-ledger-byol:3.10.0
    container_name: "scalardl-samples-scalar-ledger-1"
    volumes:
      - ./fixture/ledger-key.pem:/scalar/ledger-key.pem
      - ./ledger.properties.tmpl:/scalar/ledger/ledger.properties.tmpl
#      - ./ledger.properties:/scalar/ledger/ledger.properties
      # - ./fixture/trial-license-cert.pem:/scalar/license-cert.pem
      # If you have a commercial license key, you must use `commercial-license-cert.pem` instead of `trial-license-cert.pem`.
      #      - ./ledger.properties.tmpl:/scalar/ledger/ledger.properties.tmpl
      - ./fixture/commercial-license-cert.pem:/scalar/license-cert.pem
    depends_on:
      scalardl-ledger-schema-loader-mysql-ledger:
        condition: service_completed_successfully
    environment:
#      - SCALAR_DB_CONTACT_POINTS=jdbc:mysql://mysql_container_for_ledger:3306/
#      - SCALAR_DB_STORAGE=jdbc
#      - SCALAR_DB_USERNAME=root
#      - SCALAR_DB_PASSWORD=ledger@Kanzen2024
      - SCALAR_DL_LEDGER_PROOF_ENABLED=true
      - SCALAR_DL_LEDGER_PROOF_PRIVATE_KEY_PATH=/scalar/ledger-key.pem
      - SCALAR_DL_LEDGER_AUDITOR_ENABLED=true

      ##### PLEASE REPLACE THIS VALUE WITH YOUR LICENSE KEY #####
      - SCALAR_DL_LICENSING_LICENSE_KEY={"organization_name":"Scalar Inc / Kanzen Demo","expiration_date_time":null,"product_name":"ScalarDL Ledger","product_version":3,"license_type":"enterprise","signature":"MEUCIA1lQhcSq+L3lqkLEd0jS5Dz2aKo62eH/bGSrHzcZ6zNAiEAiO0oETpadtevEWncdov3AW0xJ0UxYNAEOkak1Tn+7jA="}
      ##### PLEASE REPLACE THIS VALUE WITH YOUR LICENSE KEY #####

    networks:
      - scalar-network
    healthcheck:
      test: [ "CMD-SHELL", "grpc_health_probe -addr=localhost:50051 && grpc_health_probe -addr=ledger-envoy:50051 || exit 1" ]
      interval: 10s
      timeout: 20s
      retries: 60
      start_period: 15s

  ledger-envoy:
    image: ghcr.io/scalar-labs/scalar-envoy:1.5.0
    container_name: "scalardl-samples-ledger-envoy-1"
    ports:
      - "9901:9901"
      - "50051:50051"
      - "50052:50052"
    depends_on:
      scalar-ledger:
        condition: service_started
    environment:
      - admin_access_log_path=/dev/stdout
      - scalardl_address=scalar-ledger
      - service_listeners=scalar-service:50051,scalar-privileged:50052
      - envoy_tls=false
    networks:
      - scalar-network

  cfssl-init:
    # This service should be run separately before two services below
    # (cfssl-serve and cfssl-ocspserve) with `depends_on` option, because if
    # they start up at the same time (by commands like `docker-compose up`),
    # they both attempt to generate the same missing certificate files, which
    # results in a race condition.
    image: ghcr.io/scalar-labs/scalar-cfssl:1.0.0
    container_name: "scalardl-samples-cfssl-init-1"
    volumes:
      - ./cfssl/data:/cfssl/data
    command: /bin/true
    networks:
      - scalar-network

  cfssl-serve:
    image: ghcr.io/scalar-labs/scalar-cfssl:1.0.0
    container_name: "scalardl-samples-cfssl-serve-1"
    volumes:
      - ./cfssl/data:/cfssl/data
    depends_on:
      - cfssl-init
    command: serve
    ports:
      - "8888:8888"
    networks:
      - scalar-network

  cfssl-ocspserve:
    image: ghcr.io/scalar-labs/scalar-cfssl:1.0.0
    container_name: "scalardl-samples-cfssl-ocspserve-1"
    volumes:
      - ./cfssl/data:/cfssl/data
    depends_on:
      - cfssl-init
    command: ocspserve
    ports:
      - "8889:8889"
    networks:
      - scalar-network

  scalardl-auditor-schema-loader-mysql-auditor:
    image: ghcr.io/scalar-labs/scalardl-schema-loader:3.10.0
    environment:
      - SCHEMA_TYPE=auditor
    volumes:
      - ./scalardb-auditor.properties:/scalardb-auditor.properties
    depends_on:
      mysqls_auditor:
        condition: service_healthy
    command:
      - "-c"
      - "/scalardb-auditor.properties"
      - "--coordinator"
    networks:
      - scalar-network
    restart: on-failure

  scalar-ledger-as-client:
    image: ghcr.io/scalar-labs/scalar-client:3.10.0
    container_name: "scalardl-samples-scalar-ledger-as-client-1"
    volumes:
      - ./fixture/ledger.pem:/scalar/ledger.pem
      - ./fixture/ledger-key.pem:/scalar/ledger-key.pem
    depends_on:
      scalar-ledger:
        condition: service_healthy
      scalar-auditor:
        condition: service_healthy
    environment:
      - SCALAR_DL_CLIENT_SERVER_HOST=ledger-envoy
      - SCALAR_DL_CLIENT_AUDITOR_HOST=auditor-envoy
      - SCALAR_DL_CLIENT_AUDITOR_ENABLED=true
      - SCALAR_DL_CLIENT_CERT_HOLDER_ID=ledger
      - SCALAR_DL_CLIENT_CERT_PATH=/scalar/ledger.pem
      - SCALAR_DL_CLIENT_PRIVATE_KEY_PATH=/scalar/ledger-key.pem

    networks:
      - scalar-network
    command: |
      dockerize -template client.properties.tmpl:client.properties
      -template log4j2.properties.tmpl:log4j2.properties
      ./client/bin/register-cert --config client.properties
    restart: on-failure:5

  scalar-audior-as-client:
    image: ghcr.io/scalar-labs/scalar-client:3.10.0
    container_name: "scalardl-samples-scalar-auditor-as-client-1"
    volumes:
      - ./fixture/auditor.pem:/scalar/auditor.pem
      - ./fixture/auditor-key.pem:/scalar/auditor-key.pem
    depends_on:
      scalar-ledger:
        condition: service_healthy
      scalar-auditor:
        condition: service_healthy
    environment:
      - SCALAR_DL_CLIENT_SERVER_HOST=ledger-envoy
      - SCALAR_DL_CLIENT_AUDITOR_HOST=auditor-envoy
      - SCALAR_DL_CLIENT_AUDITOR_ENABLED=true
      - SCALAR_DL_CLIENT_CERT_HOLDER_ID=auditor
      - SCALAR_DL_CLIENT_CERT_PATH=/scalar/auditor.pem
      - SCALAR_DL_CLIENT_PRIVATE_KEY_PATH=/scalar/auditor-key.pem
    networks:
      - scalar-network
    command: |
      dockerize -template client.properties.tmpl:client.properties
      -template log4j2.properties.tmpl:log4j2.properties
      ./client/bin/register-cert --config client.properties
    restart: on-failure:5


  scalar-auditor:
    image: ghcr.io/scalar-labs/scalardl-auditor-byol:3.10.0
    container_name: "scalardl-samples-scalar-auditor-1"
    volumes:
      - ./fixture/auditor.pem:/scalar/auditor.pem
      - ./fixture/auditor-key.pem:/scalar/auditor-key.pem
      - ./fixture/auditor.properties.tmpl:/scalar/auditor/auditor.properties.tmpl
      # - ./fixture/trial-license-cert.pem:/scalar/license-cert.pem
      # If you have a commercial license key, you must use `commercial-license-cert.pem` instead of `trial-license-cert.pem`.
      - ./fixture/commercial-license-cert.pem:/scalar/license-cert.pem
    depends_on:
      scalardl-auditor-schema-loader-mysql-auditor:
        condition: service_completed_successfully
    environment:
      - SCALAR_DB_CONTACT_POINTS=jdbc:mysql://mysql_container_for_auditor:3306/
      - SCALAR_DB_STORAGE=jdbc
      - SCALAR_DB_USERNAME=root
      - SCALAR_DB_PASSWORD=auditor@Kanzen2024
      - SCALAR_DL_AUDITOR_LEDGER_HOST=ledger-envoy
      - SCALAR_DL_AUDITOR_CERT_PATH=/scalar/auditor.pem
      - SCALAR_DL_AUDITOR_PRIVATE_KEY_PATH=/scalar/auditor-key.pem

      ##### PLEASE REPLACE THIS VALUE WITH YOUR LICENSE KEY #####
      - SCALAR_DL_LICENSING_LICENSE_KEY={"organization_name":"Scalar Inc / Kanzen Demo","expiration_date_time":null,"product_name":"ScalarDL Auditor","product_version":3,"license_type":"enterprise","signature":"MEQCICI1WFioLv+xpPmInLT7JMWEQoqmVGvLBfqsLwCjjVlqAiAUT2baA4x3aweTu8dJRNebFAXwppvLxoN6ar2GFJO3eg=="}
      ##### PLEASE REPLACE THIS VALUE WITH YOUR LICENSE KEY #####

    networks:
      - scalar-network
    healthcheck:
      test: [ "CMD-SHELL", "grpc_health_probe -addr=localhost:40051 && grpc_health_probe -addr=auditor-envoy:40051 || exit 1" ]
      interval: 3s
      timeout: 15s
      retries: 60
      start_period: 10s

  auditor-envoy:
    image: ghcr.io/scalar-labs/scalar-envoy:1.5.0
    container_name: "scalardl-samples-auditor-envoy-1"
    ports:
      - "9902:9901"
      - "40051:40051"
      - "40052:40052"
    depends_on:
      scalar-auditor:
        condition: service_started
    environment:
      - admin_access_log_path=/dev/stdout
      - scalardl_address=scalar-auditor
      - service_listeners=scalar-service:40051,scalar-privileged:40052
      - envoy_tls=false
    networks:
      - scalar-network    


# Application Configuration
#  If STORAGE_PROVIDER_TYPE is set to AWS_S3, it indicates the use of Amazon S3 as the storage provider. Ensure the following parameters are configured:
# - Set the AWS_BUCKET_NAME where the application will store data
# - Provide the AWS_ACCESS_KEY and AWS_SECRET_KEY for authentication
# Set IS_ON_LOCAL_MACHINE to false if deploying on a server like EC2, True if running on a local machine
# Additonal Info
# - STORAGE_PROVIDER_TYPE can be either= AWS_S3/LOCAL
# - IS_ON_LOCAL_MACHINE can be either = true/false
#   Email Configuration for Password Reset
# - If you want to use your own personal or organization email for password reset functionality, set the following environment variables.
# - By default, emails will be sent from percept.consulting.services.pune@gmail.com.
# Add these environment variables for custom email configuration:
#   - emailSenderServerLogin:Set this to your personal or organization email address
#   - emailSenderServerPassword: Set this to the encrypted password for the specified email account
# Example:
#   - emailSenderServerLogin="your_personal_org_email@example.com"
#   - emailSenderServerPassword="your_encrypted_email_password"
  scalar-filemanager:
   image: kanank/scalar_filemanager:latest
   container_name: "scalardl-filemanager"
   ports:
     - "8092:8092"
   volumes:
     - ./scalar-container:/home/proj/scalar-container
   networks:
     - scalar-network
   depends_on:
     - ledger-envoy
     - auditor-envoy
   restart: on-failure:5
   environment:
     - IS_ON_LOCAL_MACHINE=true
     - STORAGE_PROVIDER_TYPE=LOCAL
     - AWS_BUCKET_NAME=your-aws-s3-bucket-name-here
     - AWS_ACCESS_KEY=your-access-key-here
     - AWS_SECRET_KEY=your-secret-key-here
   healthcheck:
     test: ["CMD", "curl", "-f", "http://localhost:8092/fileManagement/admin/checkHealth"]
     interval: 30s
     timeout: 10s
     retries: 30

  scalar-bfd:
   image: kanank/scalar_bfd:latest
   container_name: "scalardl-bfd"
   depends_on:
     - scalar-filemanager
   ports:
     - "8093:8093"
   volumes:
     - ./application_data:/home/proj/application_data
   networks:
     - scalar-network
   restart: on-failure:5
   healthcheck:
     test: ["CMD", "curl", "-f", "http://localhost:8093/fileManagement_BFD/checkHealth"]
     interval: 30s
     timeout: 10s
     retries: 25

  scalar-ui:
    image: kanank/fmui-local:latest
    container_name: "fmui-local"
    ports:
      - "80:80"
    depends_on:
     scalar-filemanager:
       condition: service_healthy
     scalar-bfd:
       condition: service_healthy

volumes:
  mysql-data-Ledger:
  mysql-data-Auditor:
  mysql-data-ScalarDB:

networks:
  scalar-network:
    name: scalar-network
